// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt   DateTime
}

model User {
  @@map("users")
  id        Int       @id @default(autoincrement())
  username      String   @unique  @db.VarChar(255)
  password  String   @db.VarChar(255)
  fullName  String?   @db.VarChar(255)
  address   String?   @db.VarChar(255)
  phone    String?   @db.VarChar(255)
  accountType String?   @db.VarChar(255)
  avatar    String?   @db.VarChar(255)
  role   Role        @relation(fields: [roleId], references: [id])
  roleId    Int
  cart Cart?
  orders   Order[]
}

model Role {
  @@map("roles")
  id        Int       @id @default(autoincrement())
  name      String  @unique @db.VarChar(100)
  description  String   @db.VarChar(255)
  users     User[]
}


model Product {
  @@map("products")
  id        Int       @id @default(autoincrement())
  name      String   @db.VarChar(255)
  price  Int
  image   String?   @db.VarChar(255)
  detailDesc String   @db.MediumText
  shortDesc String   @db.VarChar(255)
  quantity  Int
  sold   Int?  @default(0)
  factory  String  @db.VarChar(255)
  target  String  @db.VarChar(255)
  cartDetails CartDetail[]
  orderDetails OrderDetail[]
}

model Cart{
  @@map("carts")
  id        Int       @id @default(autoincrement())
  sum   Int
  user  User @relation(fields: [userId], references: [id])
  userId  Int  @unique
  cartDetails CartDetail[]
}

model CartDetail{
  @@map("cart_detail")
  id        Int       @id @default(autoincrement())
  quantity  Int
  price   Int
  product  Product @relation(fields: [productId], references: [id])
  productId  Int
  cart  Cart @relation(fields: [cartId], references: [id])
  cartId  Int
}

model Order {
  id              Int    @id @default(autoincrement())
  totalPrice      Int
  receiverAddress String @db.VarChar(255)
  receiverName    String @db.VarChar(255)
  receiverPhone   String @db.VarChar(255)
  status          String @default("PENDING") //PENDING, CANCELED, COMPLETE

  paymentMethod String //COD, BANKING...
  paymentStatus String //PAYMENT_UNPAID, PAYMENT_SUCCEED, PAYMENT_FAILED
  paymentRef    String? // e.g., transaction id from banking system

  user   User   @relation(fields: [userId], references: [id])
  userId Int

  orderDetails OrderDetail[]

  @@map("orders")
}

model OrderDetail {
  id       Int @id @default(autoincrement())
  price    Int
  quantity Int

  order   Order @relation(fields: [orderId], references: [id])
  orderId Int

  product   Product   @relation(fields: [productId], references: [id])
  productId Int

  @@map("order_detail")
}
